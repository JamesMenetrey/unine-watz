#ifndef ATTESTATION_H
#define ATTESTATION_H

#include <inttypes.h>
#include <utee_defines.h>

// Result type
typedef uint32_t RA_Result;
#define RA_SUCCESS       0x00000000
#define RA_GENERIC_ERROR 0x00000001

// Remote attestation context
#define RA_CURRENT_VERSION      1
#define RA_NONCE_SIZE           32
#define RA_ANCHOR_SIZE          32
#define RA_CLAIM_HASH_ALGO      TEE_ALG_SHA256
#define RA_CLAIM_HASH_SIZE      TEE_SHA256_HASH_SIZE
#define RA_QUOTE_HASH_ALGO      TEE_ALG_SHA256
#define RA_QUOTE_HASH_SIZE      TEE_SHA256_HASH_SIZE
#define RA_SIGNATURE_ALGO       TEE_ALG_ECDSA_P256
#define RA_SIGNATURE_CURVE      TEE_ECC_CURVE_NIST_P256
#define RA_SIGNATURE_SIZE       TEE_SHA256_HASH_SIZE * 2
#define RA_ATTESTATION_COORDINATE_SIZE 32
#define RA_ATTESTATION_KEY_SIZE (2 * RA_ATTESTATION_COORDINATE_SIZE) + 1 // As defined by ANS X9.63 (check "ecc_get_key")

typedef struct
{
  // The anchor is a value generated by the server and its value is implementation details in respect to the remote attestation protocol
  uint8_t anchor[RA_ANCHOR_SIZE];
  uint32_t version;
  uint8_t claim_hash[RA_CLAIM_HASH_SIZE];
  uint8_t attestation_key[RA_ATTESTATION_KEY_SIZE];
  uint8_t signature[RA_SIGNATURE_SIZE];
} ra_quote;

#endif /*ATTESTATION_H*/